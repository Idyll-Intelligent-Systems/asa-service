#!/usr/bin/env node
/**
 * Repository Cleanup Script
 * Removes old/deprecated files after refactoring
 */

const fs = require('fs');
const path = require('path');

class RepositoryCleanup {
  constructor() {
    this.rootDir = path.join(__dirname, '..');
    
    // Files to remove from root directory
    this.filesToRemove = [
      // Old backend files
      'backend.js',
      'backend-new.js',
      
      // Old start scripts
      'start.bat',
      'start-dev.bat', 
      'run_local.sh',
      
      // Old database files
      'init-db.sql',
      'create-region-tables.sql',
      'setup-tables.js',
      'setup-map-regions.js',
      'populate-map-regions.js',
      
      // Old scripts
      'create-placeholders.js',
      'download-map-images.js',
      'download-map-images-v2.js',
      'fetch_wiki_coords.sh',
      'full_entrypoint.ps1',
      'install_deps_linux.sh',
      'install_deps_macos.sh', 
      'install_deps_windows.ps1',
      'setup.ps1',
      'test-integration.ps1',
      'test-service.ps1',
      'update-wiki.ps1',
      'validate-integration.ps1',
      
      // Documentation files (moved to docs/)
      'curl-samples.md',
      'enhanced-curl-samples.md',
      'DEV_GUIDE.md',
      'ENHANCEMENT_SUMMARY.md',
      'FINAL_INTEGRATION_SUMMARY.md',
      'IMPLEMENTATION_STATUS.md',
      'INTEGRATION_COMPLETE.md',
      'REFACTOR_PLAN.md',
      'REFACTOR_COMPLETE.md',
      
      // Data files
      'map-regions-data.json',
      
      // Log files
      'debug.log',
      'debug2.log', 
      'debug3.log',
      
      // Duplicate ESLint config
      '.eslintrc.json',
      '.eslintignore'
    ];
    
    // Directories to remove (old structure)
    this.directoriesToRemove = [
      'backup_old_files',
      'legacy_files',
      'config',      // Moved to src/backend/config
      'middleware',  // Moved to src/backend/middleware
      'routes',      // Moved to src/backend/routes  
      'services',    // Moved to src/backend/services
      'database',    // Moved to src/database
      'coverage'     // Generated by tests, will be recreated
    ];

    // Files that should stay in root
    this.filesToKeep = [
      '.env',
      '.env.development', 
      '.env.example',
      '.env.test',
      '.eslintrc.js',
      '.gitignore',
      'Dockerfile',
      'jest.config.js',
      'nodemon.json',
      'package.json',
      'package-lock.json',
      'README.md'
    ];

    // Directories that should stay in root
    this.directoriesToKeep = [
      '.git',
      '.github',
      'docker',
      'docs',
      'frontend',
      'node_modules',
      'scripts', 
      'src',
      'tests'
    ];
  }

  async cleanup() {
    console.log('üßπ Starting comprehensive repository cleanup...');
    
    try {
      // Remove deprecated files
      let removedCount = 0;
      for (const file of this.filesToRemove) {
        const filePath = path.join(this.rootDir, file);
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
          console.log(`‚úÖ Removed file: ${file}`);
          removedCount++;
        }
      }

      // Remove deprecated directories
      for (const dir of this.directoriesToRemove) {
        const dirPath = path.join(this.rootDir, dir);
        if (fs.existsSync(dirPath)) {
          fs.rmSync(dirPath, { recursive: true, force: true });
          console.log(`‚úÖ Removed directory: ${dir}/`);
          removedCount++;
        }
      }

      // Show summary of remaining files
      console.log(`\nüìä Cleanup Summary:`);
      console.log(`   Removed ${removedCount} files/directories`);
      
      // List remaining files in root
      const remainingFiles = fs.readdirSync(this.rootDir)
        .filter(item => {
          const itemPath = path.join(this.rootDir, item);
          return fs.statSync(itemPath).isFile();
        })
        .sort();

      const remainingDirs = fs.readdirSync(this.rootDir)
        .filter(item => {
          const itemPath = path.join(this.rootDir, item);
          return fs.statSync(itemPath).isDirectory();
        })
        .sort();

      console.log(`\nüìÅ Current root directory structure:`);
      console.log(`\nüìÑ Files (${remainingFiles.length}):`);
      remainingFiles.forEach(file => {
        const shouldKeep = this.filesToKeep.includes(file);
        const icon = shouldKeep ? '‚úÖ' : '‚ö†Ô∏è ';
        console.log(`   ${icon} ${file}`);
      });

      console.log(`\nüìÇ Directories (${remainingDirs.length}):`);
      remainingDirs.forEach(dir => {
        const shouldKeep = this.directoriesToKeep.includes(dir);
        const icon = shouldKeep ? '‚úÖ' : '‚ö†Ô∏è ';
        console.log(`   ${icon} ${dir}/`);
      });

      // Check for any unexpected files/directories
      const unexpectedFiles = remainingFiles.filter(file => !this.filesToKeep.includes(file));
      const unexpectedDirs = remainingDirs.filter(dir => !this.directoriesToKeep.includes(dir));

      if (unexpectedFiles.length > 0 || unexpectedDirs.length > 0) {
        console.log(`\n‚ö†Ô∏è  Unexpected items found:`);
        if (unexpectedFiles.length > 0) {
          console.log(`   Files: ${unexpectedFiles.join(', ')}`);
        }
        if (unexpectedDirs.length > 0) {
          console.log(`   Directories: ${unexpectedDirs.join(', ')}`);
        }
        console.log(`   Consider removing these manually if they're not needed.`);
      }

      // Move docs files to docs directory if they exist in root
      const docsToMove = [
        'curl-samples.md',
        'enhanced-curl-samples.md', 
        'ENHANCEMENT_SUMMARY.md',
        'FINAL_INTEGRATION_SUMMARY.md',
        'IMPLEMENTATION_STATUS.md',
        'INTEGRATION_COMPLETE.md',
        'REFACTOR_PLAN.md',
        'REFACTOR_COMPLETE.md'
      ];

      const docsDir = path.join(this.rootDir, 'docs');
      if (!fs.existsSync(docsDir)) {
        fs.mkdirSync(docsDir, { recursive: true });
      }

      for (const docFile of docsToMove) {
        const sourcePath = path.join(this.rootDir, docFile);
        const targetPath = path.join(docsDir, docFile);
        
        if (fs.existsSync(sourcePath) && !fs.existsSync(targetPath)) {
          fs.renameSync(sourcePath, targetPath);
          console.log(`üìÑ Moved ${docFile} to docs/`);
        }
      }

      console.log(`\nüéâ Repository cleanup completed!`);
      console.log(`\nüìã Clean repository structure:`);
      console.log(`   src/           - All source code`);
      console.log(`   tests/         - All test files`);
      console.log(`   scripts/       - Utility scripts`);
      console.log(`   docs/          - Documentation`);
      console.log(`   docker/        - Docker configurations`);
      console.log(`   frontend/      - Frontend assets`);
      console.log(`   Root files:    - Only essential config files`);

    } catch (error) {
      console.error('‚ùå Cleanup failed:', error.message);
      throw error;
    }
  }

  async run() {
    try {
      await this.cleanup();
    } catch (error) {
      console.error('‚ùå Repository cleanup failed:', error.message);
      process.exit(1);
    }
  }
}

// Run if called directly
if (require.main === module) {
  const cleanup = new RepositoryCleanup();
  cleanup.run();
}

module.exports = RepositoryCleanup;
